#include <iostream>
#include <vector>

void merge(std::vector<int>& arr, int left, int middle, int right) {
    int n1 = middle - left + 1;
    int n2 = right - middle;
    std::vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[middle + 1 + j];
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(std::vector<int>& arr, int left, int right) {
    if (left < right) {
        int middle = left + (right - left) / 2;
        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);
        merge(arr, left, middle, right);
    }
}

void printCounts(const std::vector<int>& arr) {
    int current = arr[0];
    int count = 1;
    for (int i = 1; i <= arr.size(); i++) {
        if (i == arr.size() || arr[i] != current) {
            std::cout << current << " : " << count << std::endl;
            if (i < arr.size()) {
                current = arr[i];
                count = 1;
            }
        } else {
            count++;
        }
    }
}

int main() {
    // Ejemplo de entrada:
    std::vector<int> ballNumbers = {3, 2, 3, 5, 3, 1, 1, 3};
    int M = 5; // Suponiendo que M es el número más grande posible

    // Ordenar los números usando merge sort
    mergeSort(ballNumbers, 0, ballNumbers.size() - 1);
    
    // Imprimir los conteos
    printCounts(ballNumbers);

    return 0;
}

